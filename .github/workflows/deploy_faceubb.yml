name: Despliegue a face-ubb

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Instalar dependencias (OpenVPN, SSH y sshpass)
        run: |
          sudo apt update -qq > /dev/null 2>&1
          sudo apt install -y -qq openvpn openvpn-systemd-resolved openssh-client sshpass base64

      - name: Crear archivo de configuración OpenVPN
        run: echo "${{ secrets.OPENVPN_CONFIG }}" > /dev/shm/face-ubb.ovpn

      - name: Conexion a la VPN de la UBB
        uses: kota65535/github-openvpn-connect-action@v3.1.0
        timeout-minutes: 2
        continue-on-error: false
        with:
          config_file: /dev/shm/face-ubb.ovpn
          username: ${{ secrets.OPENVPN_USERNAME }}
          password: ${{ secrets.OPENVPN_PASSWORD }}

      - name: Eliminar archivo de configuración OpenVPN
        if: always()
        run: rm -f /dev/shm/face-ubb.ovpn

      - name: Codificar secretos .env a Base64
        id: encode_secrets
        run: |
          # Usamos printf %s para no añadir un newline extra al contenido del secreto
          # Usamos base64 -w0 para que la salida sea una sola línea sin wrapping
          encoded_frontend=$(printf %s "${{ secrets.ENV_FRONTEND_CONTENT }}" | base64 -w0)
          encoded_backend=$(printf %s "${{ secrets.ENV_BACKEND_CONTENT }}" | base64 -w0)
          echo "::set-output name=frontend_b64::$encoded_frontend"
          echo "::set-output name=backend_b64::$encoded_backend"
          # Para versiones más nuevas de Actions, usar GITHUB_OUTPUT:
          # echo "frontend_b64=$encoded_frontend" >> $GITHUB_OUTPUT
          # echo "backend_b64=$encoded_backend" >> $GITHUB_OUTPUT

      - name: Ejecutar despliegue
        env:
          PASS_GIT_COMMIT_SHA: ${{ github.sha }}
          PASS_SECRET_ENV_FRONTEND_CONTENT_B64: ${{ steps.encode_secrets.outputs.frontend_b64 }}
          PASS_SECRET_ENV_BACKEND_CONTENT_B64: ${{ steps.encode_secrets.outputs.backend_b64 }}
        run: |
          export GH_ARG_GIT_COMMIT_SHA="${{ env.PASS_GIT_COMMIT_SHA }}"
          export GH_ARG_SECRET_ENV_FRONTEND_CONTENT_B64="${{ env.PASS_SECRET_ENV_FRONTEND_CONTENT_B64 }}"
          export GH_ARG_SECRET_ENV_BACKEND_CONTENT_B64="${{ env.PASS_SECRET_ENV_BACKEND_CONTENT_B64 }}"

          sshpass -p "${{ secrets.PROD_PASSWORD }}" ssh \
          -q \
          -o StrictHostKeyChecking=no \
          -p ${{ secrets.PROD_PORT }} \
          ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} \
          bash -s -- \
          "$GH_ARG_GIT_COMMIT_SHA" \
          "$GH_ARG_SECRET_ENV_FRONTEND_CONTENT_B64" \
          "$GH_ARG_SECRET_ENV_BACKEND_CONTENT_B64" << 'EOF'
            set -euo pipefail

            ARG_GIT_COMMIT_SHA="$1"
            ARG_SECRET_ENV_FRONTEND_CONTENT_B64="$2"
            ARG_SECRET_ENV_BACKEND_CONTENT_B64="$3"
            
            # Cargar NVM si existe y Node.js fue instalado con él
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              echo "Cargando nvm..."
              . "$NVM_DIR/nvm.sh" # Source nvm.sh
            else
              echo "Advertencia: nvm no encontrado en $NVM_DIR. Asumiendo que node/npm están en el PATH."
            fi
            
            # Verificar si npm está ahora disponible
            if ! command -v npm &> /dev/null; then
                echo "Error: npm no se pudo encontrar incluso después de intentar cargar nvm."
                echo "Por favor, instala Node.js y npm en el servidor y asegúrate de que estén en el PATH."
                exit 1
            fi

            APP_DIR="/home/vlopez/Proyecto_GPS"
            ENV_FILE_BACKEND="$APP_DIR/backend/src/config/.env"
            ENV_FILE_FRONTEND="$APP_DIR/frontend/.env"
            
            # 1. Actualizar código
            cd "$APP_DIR"
            git fetch origin
            # Usa el SHA del commit que pasaste como argumento
            git reset --hard "$ARG_GIT_COMMIT_SHA" 
            
            # 2. Crear/Sobrescribir .env para Backend con contenido del secreto
            if [ -n "$ARG_SECRET_ENV_BACKEND_CONTENT_B64" ]; then
              echo "Escribiendo configuración de backend en $ENV_FILE_BACKEND..."
              # Decodificar Base64 y escribir al archivo
              echo "$ARG_SECRET_ENV_BACKEND_CONTENT_B64" | base64 -d > "$ENV_FILE_BACKEND"
            else
              echo "ADVERTENCIA: El secreto ENV_BACKEND_CONTENT (Base64) no se pasó o está vacío. Creando .env básico."
              echo "# Generated on $(date)" > "$ENV_FILE_BACKEND"
              echo "NODE_ENV=production" >> "$ENV_FILE_BACKEND"
            fi

            # 3. Crear/Sobrescribir .env para Frontend con contenido del secreto (decodificado)
            if [ -n "$ARG_SECRET_ENV_FRONTEND_CONTENT_B64" ]; then
              echo "Escribiendo configuración de frontend en $ENV_FILE_FRONTEND..."
              # Decodificar Base64 y escribir al archivo
              echo "$ARG_SECRET_ENV_FRONTEND_CONTENT_B64" | base64 -d > "$ENV_FILE_FRONTEND"
            else
              echo "ADVERTENCIA: El secreto ENV_FRONTEND_CONTENT (Base64) no se pasó o está vacío. Creando .env básico."
              echo "# Generated on $(date)" > "$ENV_FILE_FRONTEND"
              echo "VITE_API_URL=https://url-por-defecto.com/api" >> "$ENV_FILE_FRONTEND"
            fi
            
            # 4. Instalar dependencias del backend
            cd "$APP_DIR/backend"
            npm ci --production

            # 5. Reiniciar backend
            pm2 restart freehoot-backend || pm2 start src/index.js --name "freehoot-backend"
            
            # 6. Instalar dependencias y contruir frontend
            cd "$APP_DIR/frontend"
            npm ci
            npm run build

            # 7. Reiniciar frontend (considera si es necesario para frontend estático)
            pm2 restart freehoot-frontend || pm2 start npm --name "freehoot-frontend" -- run preview
            
            echo "Despliegue completado en $(date)"
          EOF

      - name: Limpieza
        if: always()
        run: |
          sudo pkill openvpn || true
          rm -f /tmp/ubb-vpn.ovpn
